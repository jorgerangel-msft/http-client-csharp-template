// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SimplePost
{
    // Data plane generated client.
    public partial class SimplePostClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        internal ClientDiagnostics ClientDiagnostics { get; }

        public virtual HttpPipeline Pipeline => _pipeline;

        protected SimplePostClient()
        {
        }

        public SimplePostClient(Uri endpoint) : this(endpoint, new SimplePostClientOptions())
        {
        }

        public SimplePostClient(Uri endpoint, SimplePostClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SimplePostClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        public virtual async Task<Response<object>> IncrementCountAsync(int addend, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await IncrementCountAsync(addend, context).ConfigureAwait(false);
            return Response.FromValue(response.Content.ToObjectFromJson<object>(), response);
        }

        public virtual Response<object> IncrementCount(int addend, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = IncrementCount(addend, context);
            return Response.FromValue(response.Content.ToObjectFromJson<object>(), response);
        }

        public virtual async Task<Response> IncrementCountAsync(int addend, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SimplePostClient.IncrementCount");
            scope.Start();
            try
            {
                using HttpMessage message = CreateIncrementCountRequest(addend, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response IncrementCount(int addend, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("SimplePostClient.IncrementCount");
            scope.Start();
            try
            {
                using HttpMessage message = CreateIncrementCountRequest(addend, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        public virtual async Task<Response> ReadAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SimplePostClient.Read");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReadRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        public virtual Response Read(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("SimplePostClient.Read");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReadRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateIncrementCountRequest(int addend, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/add/", false);
            uri.AppendPath(addend, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReadRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201202500);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201202500;
        private static ResponseClassifier ResponseClassifier201202500 => _responseClassifier201202500 ??= new StatusCodeClassifier(stackalloc ushort[] { 201, 202, 500 });
    }
}
